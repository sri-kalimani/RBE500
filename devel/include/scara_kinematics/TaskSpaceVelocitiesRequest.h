// Generated by gencpp from file scara_kinematics/TaskSpaceVelocitiesRequest.msg
// DO NOT EDIT!


#ifndef SCARA_KINEMATICS_MESSAGE_TASKSPACEVELOCITIESREQUEST_H
#define SCARA_KINEMATICS_MESSAGE_TASKSPACEVELOCITIESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_kinematics
{
template <class ContainerAllocator>
struct TaskSpaceVelocitiesRequest_
{
  typedef TaskSpaceVelocitiesRequest_<ContainerAllocator> Type;

  TaskSpaceVelocitiesRequest_()
    : q_pos()
    , q_vel()  {
    }
  TaskSpaceVelocitiesRequest_(const ContainerAllocator& _alloc)
    : q_pos(_alloc)
    , q_vel(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_pos_type;
  _q_pos_type q_pos;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _q_vel_type;
  _q_vel_type q_vel;





  typedef boost::shared_ptr< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct TaskSpaceVelocitiesRequest_

typedef ::scara_kinematics::TaskSpaceVelocitiesRequest_<std::allocator<void> > TaskSpaceVelocitiesRequest;

typedef boost::shared_ptr< ::scara_kinematics::TaskSpaceVelocitiesRequest > TaskSpaceVelocitiesRequestPtr;
typedef boost::shared_ptr< ::scara_kinematics::TaskSpaceVelocitiesRequest const> TaskSpaceVelocitiesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.q_pos == rhs.q_pos &&
    lhs.q_vel == rhs.q_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d89d7b2bf75f07170664fc55db587d4e";
  }

  static const char* value(const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd89d7b2bf75f0717ULL;
  static const uint64_t static_value2 = 0x0664fc55db587d4eULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_kinematics/TaskSpaceVelocitiesRequest";
  }

  static const char* value(const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Goal: Find task space velocities\n"
"\n"
"#Inputs\n"
"float64[] q_pos\n"
"\n"
"float64[] q_vel\n"
;
  }

  static const char* value(const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q_pos);
      stream.next(m.q_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TaskSpaceVelocitiesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_kinematics::TaskSpaceVelocitiesRequest_<ContainerAllocator>& v)
  {
    s << indent << "q_pos[]" << std::endl;
    for (size_t i = 0; i < v.q_pos.size(); ++i)
    {
      s << indent << "  q_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_pos[i]);
    }
    s << indent << "q_vel[]" << std::endl;
    for (size_t i = 0; i < v.q_vel.size(); ++i)
    {
      s << indent << "  q_vel[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.q_vel[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_KINEMATICS_MESSAGE_TASKSPACEVELOCITIESREQUEST_H
