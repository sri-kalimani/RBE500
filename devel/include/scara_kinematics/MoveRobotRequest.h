// Generated by gencpp from file scara_kinematics/MoveRobotRequest.msg
// DO NOT EDIT!


#ifndef SCARA_KINEMATICS_MESSAGE_MOVEROBOTREQUEST_H
#define SCARA_KINEMATICS_MESSAGE_MOVEROBOTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_kinematics
{
template <class ContainerAllocator>
struct MoveRobotRequest_
{
  typedef MoveRobotRequest_<ContainerAllocator> Type;

  MoveRobotRequest_()
    : ref(0.0)  {
    }
  MoveRobotRequest_(const ContainerAllocator& _alloc)
    : ref(0.0)  {
  (void)_alloc;
    }



   typedef float _ref_type;
  _ref_type ref;





  typedef boost::shared_ptr< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveRobotRequest_

typedef ::scara_kinematics::MoveRobotRequest_<std::allocator<void> > MoveRobotRequest;

typedef boost::shared_ptr< ::scara_kinematics::MoveRobotRequest > MoveRobotRequestPtr;
typedef boost::shared_ptr< ::scara_kinematics::MoveRobotRequest const> MoveRobotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.ref == rhs.ref;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c779e413fd23328fc4ad2e049b1ea9c";
  }

  static const char* value(const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c779e413fd23328ULL;
  static const uint64_t static_value2 = 0xfc4ad2e049b1ea9cULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_kinematics/MoveRobotRequest";
  }

  static const char* value(const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 ref\n"
;
  }

  static const char* value(const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ref);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveRobotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_kinematics::MoveRobotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_kinematics::MoveRobotRequest_<ContainerAllocator>& v)
  {
    s << indent << "ref: ";
    Printer<float>::stream(s, indent + "  ", v.ref);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_KINEMATICS_MESSAGE_MOVEROBOTREQUEST_H
