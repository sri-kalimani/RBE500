// Generated by gencpp from file scara_kinematics/JointSpaceVelocitiesRequest.msg
// DO NOT EDIT!


#ifndef SCARA_KINEMATICS_MESSAGE_JOINTSPACEVELOCITIESREQUEST_H
#define SCARA_KINEMATICS_MESSAGE_JOINTSPACEVELOCITIESREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace scara_kinematics
{
template <class ContainerAllocator>
struct JointSpaceVelocitiesRequest_
{
  typedef JointSpaceVelocitiesRequest_<ContainerAllocator> Type;

  JointSpaceVelocitiesRequest_()
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , q1_dot(0.0)
    , q2_dot(0.0)
    , q3_dot(0.0)  {
    }
  JointSpaceVelocitiesRequest_(const ContainerAllocator& _alloc)
    : q1(0.0)
    , q2(0.0)
    , q3(0.0)
    , x(0.0)
    , y(0.0)
    , z(0.0)
    , wx(0.0)
    , wy(0.0)
    , wz(0.0)
    , q1_dot(0.0)
    , q2_dot(0.0)
    , q3_dot(0.0)  {
  (void)_alloc;
    }



   typedef double _q1_type;
  _q1_type q1;

   typedef double _q2_type;
  _q2_type q2;

   typedef double _q3_type;
  _q3_type q3;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _z_type;
  _z_type z;

   typedef double _wx_type;
  _wx_type wx;

   typedef double _wy_type;
  _wy_type wy;

   typedef double _wz_type;
  _wz_type wz;

   typedef double _q1_dot_type;
  _q1_dot_type q1_dot;

   typedef double _q2_dot_type;
  _q2_dot_type q2_dot;

   typedef double _q3_dot_type;
  _q3_dot_type q3_dot;





  typedef boost::shared_ptr< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct JointSpaceVelocitiesRequest_

typedef ::scara_kinematics::JointSpaceVelocitiesRequest_<std::allocator<void> > JointSpaceVelocitiesRequest;

typedef boost::shared_ptr< ::scara_kinematics::JointSpaceVelocitiesRequest > JointSpaceVelocitiesRequestPtr;
typedef boost::shared_ptr< ::scara_kinematics::JointSpaceVelocitiesRequest const> JointSpaceVelocitiesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.q1 == rhs.q1 &&
    lhs.q2 == rhs.q2 &&
    lhs.q3 == rhs.q3 &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.z == rhs.z &&
    lhs.wx == rhs.wx &&
    lhs.wy == rhs.wy &&
    lhs.wz == rhs.wz &&
    lhs.q1_dot == rhs.q1_dot &&
    lhs.q2_dot == rhs.q2_dot &&
    lhs.q3_dot == rhs.q3_dot;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator1> & lhs, const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "25f781ef521cc3be875209dc009a9749";
  }

  static const char* value(const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x25f781ef521cc3beULL;
  static const uint64_t static_value2 = 0x875209dc009a9749ULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_kinematics/JointSpaceVelocitiesRequest";
  }

  static const char* value(const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Goal: Find joint space velocities\n"
"\n"
"#Inputs\n"
"float64 q1\n"
"float64 q2\n"
"float64 q3\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 wx\n"
"float64 wy\n"
"float64 wz\n"
"\n"
"#Outputs\n"
"float64 q1_dot\n"
"float64 q2_dot\n"
"float64 q3_dot\n"
;
  }

  static const char* value(const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.q1);
      stream.next(m.q2);
      stream.next(m.q3);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.z);
      stream.next(m.wx);
      stream.next(m.wy);
      stream.next(m.wz);
      stream.next(m.q1_dot);
      stream.next(m.q2_dot);
      stream.next(m.q3_dot);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointSpaceVelocitiesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_kinematics::JointSpaceVelocitiesRequest_<ContainerAllocator>& v)
  {
    s << indent << "q1: ";
    Printer<double>::stream(s, indent + "  ", v.q1);
    s << indent << "q2: ";
    Printer<double>::stream(s, indent + "  ", v.q2);
    s << indent << "q3: ";
    Printer<double>::stream(s, indent + "  ", v.q3);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "z: ";
    Printer<double>::stream(s, indent + "  ", v.z);
    s << indent << "wx: ";
    Printer<double>::stream(s, indent + "  ", v.wx);
    s << indent << "wy: ";
    Printer<double>::stream(s, indent + "  ", v.wy);
    s << indent << "wz: ";
    Printer<double>::stream(s, indent + "  ", v.wz);
    s << indent << "q1_dot: ";
    Printer<double>::stream(s, indent + "  ", v.q1_dot);
    s << indent << "q2_dot: ";
    Printer<double>::stream(s, indent + "  ", v.q2_dot);
    s << indent << "q3_dot: ";
    Printer<double>::stream(s, indent + "  ", v.q3_dot);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_KINEMATICS_MESSAGE_JOINTSPACEVELOCITIESREQUEST_H
