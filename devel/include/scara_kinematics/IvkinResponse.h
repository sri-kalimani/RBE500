// Generated by gencpp from file scara_kinematics/IvkinResponse.msg
// DO NOT EDIT!


#ifndef SCARA_KINEMATICS_MESSAGE_IVKINRESPONSE_H
#define SCARA_KINEMATICS_MESSAGE_IVKINRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace scara_kinematics
{
template <class ContainerAllocator>
struct IvkinResponse_
{
  typedef IvkinResponse_<ContainerAllocator> Type;

  IvkinResponse_()
    : joints()  {
    }
  IvkinResponse_(const ContainerAllocator& _alloc)
    : joints(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::scara_kinematics::IvkinResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::scara_kinematics::IvkinResponse_<ContainerAllocator> const> ConstPtr;

}; // struct IvkinResponse_

typedef ::scara_kinematics::IvkinResponse_<std::allocator<void> > IvkinResponse;

typedef boost::shared_ptr< ::scara_kinematics::IvkinResponse > IvkinResponsePtr;
typedef boost::shared_ptr< ::scara_kinematics::IvkinResponse const> IvkinResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::scara_kinematics::IvkinResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::scara_kinematics::IvkinResponse_<ContainerAllocator1> & lhs, const ::scara_kinematics::IvkinResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::scara_kinematics::IvkinResponse_<ContainerAllocator1> & lhs, const ::scara_kinematics::IvkinResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace scara_kinematics

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::scara_kinematics::IvkinResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::scara_kinematics::IvkinResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::scara_kinematics::IvkinResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1202c50759ccad57166aaeb5af77c4fa";
  }

  static const char* value(const ::scara_kinematics::IvkinResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1202c50759ccad57ULL;
  static const uint64_t static_value2 = 0x166aaeb5af77c4faULL;
};

template<class ContainerAllocator>
struct DataType< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "scara_kinematics/IvkinResponse";
  }

  static const char* value(const ::scara_kinematics::IvkinResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Vector3 joints\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::scara_kinematics::IvkinResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IvkinResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::scara_kinematics::IvkinResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::scara_kinematics::IvkinResponse_<ContainerAllocator>& v)
  {
    s << indent << "joints: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.joints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SCARA_KINEMATICS_MESSAGE_IVKINRESPONSE_H
